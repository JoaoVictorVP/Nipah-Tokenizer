

using System;
using System.Collections.Generic;

namespace NipahTokenizer.NanoDesu
{
    public class NipahRuntime
    {
        public static void Error(string message)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(message);
            Console.ResetColor();
        }
    }
    public class NipahCompiler
    {
        public NipahWorld world;
        public List<IMiiExpression> expressions = new List<IMiiExpression>(32);

        public void SetWorld(NipahWorld world) => this.world = world;

        static Tokenizer tokenizer = new Tokenizer();
        public void Compile(string code)
        {
            try {
                var _tokens_ = new ProgressiveList<Token>(tokenizer.Tokenize(code, true));
                
            }
            catch(Exception ex) { world.ERROR(ex); }
        }
    }
    public struct NipahWorld
    {
        public DataStructure data;
        List<string> errors;
        public void IterateErrors(Action<string> errorIterator) => errors.ForEach(errorIterator);
        public void ERROR(Exception ex) => errors.Add(ex.ToString());

        public NipahWorld(DataStructure data)
        {
            this.data = data;
            errors = new List<string>(32);
        }
    }
    public interface ICompilerPiece
    {
        bool tryCompile (DynToken tokens, out IRuntimePiece runtime);
    }
    public interface IRuntimePiece
    {
        void run(DataStructure data);
    }
}
